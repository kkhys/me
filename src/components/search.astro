---
import "@pagefind/modular-ui/css/ui.css";
import { SearchIcon } from "lucide-react";
---

<astro-search data-host={Astro.url.host}>
  <dialog id="search-modal">
    <div id="search">
      <div id="search-input"></div>
      <div id="search-summary"></div>
      <div id="search-results"></div>
    </div>
  </dialog>
  <div class="fixed bottom-[4lvh] inset-x-0 z-50 pointer-events-none">
    <div class="container max-w-6xl mx-auto md:px-8">
      <div class="flex justify-end">
        <button
          id="search-button"
          type="button"
          class="size-10 grid place-content-center rounded-full cursor-pointer outline-none overflow-hidden backdrop-blur-2xl bg-background/70 text-foreground border border-white/20 shadow-[0_8px_32px_0_rgba(0,0,0,0.12)] before:absolute before:inset-0 before:rounded-[inherit] before:bg-gradient-to-b before:from-white/10 before:to-transparent before:pointer-events-none z-50 transition-all duration-200 ease-in-out hover:shadow-[0_12px_40px_0_rgba(0,0,0,0.15)] hover:border-white/30 active:scale-95 pointer-events-auto mr-6 md:mr-0"
          aria-label="検索"
        >
          <SearchIcon className="size-4 relative z-10" />
        </button>
      </div>
    </div>
  </div>
  <p class="sr-only">
    Press{" "}
    <kbd>⌘K</kbd>
  </p>
</astro-search>

<style>
  astro-search {
    display: contents;
  }

  #search-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: transparent;
    border: none;
    z-index: 9999;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding: 15vh 0 0;
    margin: 0 auto;
    opacity: 0;
    pointer-events: none;
    transition:
      opacity 200ms ease-in-out,
      display 200ms ease-in-out allow-discrete,
      overlay 200ms ease-in-out allow-discrete;
  }

  #search-modal[open] {
    opacity: 1;
    pointer-events: auto;
  }

  @starting-style {
    #search-modal[open] {
      opacity: 0;
    }
  }

  #search-modal::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(8px);
    opacity: 0;
    transition:
      opacity 200ms ease-in-out,
      overlay 200ms ease-in-out allow-discrete,
      display 200ms ease-in-out allow-discrete;
  }

  #search-modal[open]::backdrop {
    opacity: 1;
  }

  @starting-style {
    #search-modal[open]::backdrop {
      opacity: 0;
    }
  }

  #search {
    width: 100%;
    max-width: 640px;
    max-height: min(640px, 80vh);
    overflow: hidden;
    background-color: #ffffff;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: var(--radius-lg);
    box-shadow:
      0 8px 32px rgba(0, 0, 0, 0.08),
      0 0 0 1px rgba(255, 255, 255, 0.5) inset;
    transform: scale(0.96);
    transition: transform 200ms cubic-bezier(0.16, 1, 0.3, 1);
    display: flex;
    flex-direction: column;
  }

  #search-modal[open] #search {
    transform: scale(1);
  }

  @starting-style {
    #search-modal[open] #search {
      transform: scale(0.96);
    }
  }

  #search-input.has-input {
    border-bottom: 1px solid var(--border);
  }

  #search :global(.pagefind-modular-input-wrapper::before) {
      background-color: var(--muted-foreground);
  }

  #search :global(.pagefind-modular-input-clear) {
    display: none;
  }

  #search :global(.pagefind-modular-input) {
    border: none;
    padding: 0.75rem 0.75rem 0.75rem 2.4rem;
    font-size: var(--text-sm);
  }

  #search :global(.pagefind-modular-input:focus) {
    outline: none;
  }

  #search :global(.pagefind-modular-input::placeholder) {
    color: var(--muted-foreground);
  }

  @media (prefers-color-scheme: dark) {
      #search {
          background-color: rgba(26, 26, 26, 0.7);
          backdrop-filter: blur(16px) saturate(180%);
          -webkit-backdrop-filter: blur(16px) saturate(180%);
          border: 1px solid rgba(255, 255, 255, 0.1);
          box-shadow:
                  0 8px 32px rgba(0, 0, 0, 0.4),
                  0 0 0 1px rgba(255, 255, 255, 0.05) inset;
      }

      #search :global(.pagefind-modular-input) {
          background-color: transparent;
          color: var(--foreground);
      }
  }

  #search-summary {
    padding: 0.75rem 1rem;
    font-size: var(--text-xs);
    color: var(--muted-foreground);
    font-weight: var(--font-weight-medium);
    display: none;
  }

  #search-summary:has(~ #search-results:not(:empty)) {
    border-bottom: 1px solid var(--border);
  }

  #search-summary:not(:empty) {
    display: block;
  }

  #search-results {
    overflow-y: auto;
    padding: 0.5rem;
    display: none;
  }

  #search-results:not(:empty) {
    display: block;
  }

  #search-results :global(.pagefind-modular-ui__result) {
    display: block;
    padding: 0.75rem 1rem;
    margin: 0.125rem 0;
    border-radius: var(--radius-md);
    color: var(--foreground);
    transition: all 150ms cubic-bezier(0.16, 1, 0.3, 1);
    border: 1px solid transparent;
  }

  #search-results :global(.pagefind-modular-ui__result:hover) {
    background-color: var(--accent);
    border-color: var(--border);
  }

  #search-results :global(.pagefind-modular-ui__result > div:first-child) {
    font-size: var(--text-sm);
    font-weight: var(--font-weight-medium);
    margin-bottom: 0.25rem;
    color: var(--foreground);
  }

  #search-results :global(.pagefind-modular-ui__result > div:last-child) {
    font-size: var(--text-xs);
    color: var(--muted-foreground);
    line-height: var(--leading-normal);
  }

  #search-results :global(mark) {
    background-color: var(--primary);
    color: var(--primary-foreground);
    padding: 0.0625rem 0.125rem;
    border-radius: 0.125rem;
    font-weight: var(--font-weight-medium);
  }
</style>

<script>
  // @ts-expect-error: Pagefind modular ui doesn't have types yet
  import { Instance, Input } from "@pagefind/modular-ui";

  interface PagefindResultData {
      url: string;
      excerpt: string;
      meta?: {
          title?: string;
      };
  }

  interface PagefindResult {
    data: () => Promise<PagefindResultData>;
  }

  interface PagefindResults {
    results?: PagefindResult[];
  }

  class AstroSearch extends HTMLElement {
    private instance: typeof Instance.prototype | null = null;
    private currentPage = 0;
    private readonly pageSize = 10;
    private allResults: PagefindResult[] = [];
    private isLoading = false;
    private observer: IntersectionObserver | null = null;
    private currentSearchTerm = "";

    connectedCallback() {
      this.instance = new Instance({
        bundlePath: "/pagefind/",
      });

      this.instance.add(new Input({
        containerElement: "#search-input",
        debounceTimeoutMs: 300,
      }));

      this.instance.on("search", (term: string) => {
        this.currentSearchTerm = term;
        const searchInputContainer = document.querySelector("#search-input");
        if (searchInputContainer) {
          if (term.length > 0) {
            searchInputContainer.classList.add("has-input");
          } else {
            searchInputContainer.classList.remove("has-input");
          }
        }
      });

      this.instance.on("results", (results: PagefindResults) => {
        this.allResults = results.results || [];
        this.currentPage = 0;
        this.renderResults();
        this.setupInfiniteScroll();
        this.renderSummary();
      });

      setTimeout(() => {
        const input = document.querySelector("#search-input input");
        if (input instanceof HTMLInputElement) {
          input.placeholder = "検索キーワードを入力...";
        }
      }, 0);

      const modalButton = this.querySelector("#search-button");
      const modal = this.querySelector("#search-modal") as HTMLDialogElement | null;

      if (modalButton && modal) {
        this.setupEventListeners(modalButton, modal);
      }
    }

    async renderResults() {
      const container = document.querySelector("#search-results");
      if (!container) return;

      const startIdx = this.currentPage * this.pageSize;
      const endIdx = startIdx + this.pageSize;
      const resultsToShow = this.allResults.slice(startIdx, endIdx);

      if (this.currentPage === 0) {
        container.innerHTML = "";
      }

      const promises = resultsToShow.map((result) => result.data());
      const dataArray = await Promise.all(promises);

      dataArray.forEach((data) => {
        const resultEl = document.createElement("a");
        resultEl.href = data.url;
        resultEl.className = "pagefind-modular-ui__result";

        const titleEl = document.createElement("div");
        titleEl.textContent = data.meta?.title || "無題";

        const excerptEl = document.createElement("div");
        excerptEl.innerHTML = data.excerpt || "";

        resultEl.appendChild(titleEl);
        resultEl.appendChild(excerptEl);
        container.appendChild(resultEl);
      });

      this.setupInfiniteScroll();
    }

    setupInfiniteScroll() {
      const container = document.querySelector("#search-results");
      if (!container) return;

      if (this.observer) {
        this.observer.disconnect();
      }

      const hasMore = (this.currentPage + 1) * this.pageSize < this.allResults.length;
      if (!hasMore) return;

      this.observer = new IntersectionObserver(
        (entries) => {
          const lastEntry = entries[0];
          if (lastEntry?.isIntersecting && !this.isLoading) {
            const hasMore = (this.currentPage + 1) * this.pageSize < this.allResults.length;
            if (hasMore) {
              this.isLoading = true;
              this.currentPage++;
              this.renderResults().finally(() => {
                this.isLoading = false;
              });
            }
          }
        },
        {
          root: container,
          rootMargin: "100px",
          threshold: 0.1,
        }
      );

      const lastResult = container.lastElementChild;
      if (lastResult) {
        this.observer.observe(lastResult);
      }
    }

    renderSummary() {
      const summaryElement = document.querySelector("#search-summary");
      if (!summaryElement) return;

      if (!this.currentSearchTerm) {
        summaryElement.textContent = "";
        return;
      }

      const count = this.allResults.length;
      if (count > 0) {
        summaryElement.textContent = `${count} 件の結果`;
      } else {
        summaryElement.textContent = "結果が見つかりませんでした";
      }
    }

    setupEventListeners(modalButton: Element, modal: HTMLDialogElement) {
      modalButton.addEventListener("click", () => {
        modal.showModal();
        document.body.style.overflow = "hidden";
      });

      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.close();
          document.body.style.overflow = "";
        }
      });

      modal.addEventListener("close", () => {
        document.body.style.overflow = "";
      });

      window.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && modal.open) {
          modal.close();
          document.body.style.overflow = "";
        }

        if ((e.ctrlKey || e.metaKey) && e.key === "k") {
          e.preventDefault();
          modal.showModal();
          document.body.style.overflow = "hidden";
        }
      });
    }
  }

  customElements.define("astro-search", AstroSearch);
</script>
