---
import { Picture as AstroPicture, type Picture, getImage } from "astro:assets";
import type { UnresolvedImageTransform } from "astro";

import { cn } from "#/lib/ui";
import type { CustomImageProps } from "./types";

type Props = CustomImageProps;

const { class: className, ambientMode, title, ...rest } = Astro.props;

const blurryImage = await getImage({
  ...(rest as UnresolvedImageTransform),
  width: 20,
});

const divClass = cn(
  "blur-load select-none rounded-2xl border-[#474747] dark:border",
  ambientMode && "ambient-mode",
  className,
);

const pictureProps = {
  class: cn("rounded-2xl", className),
  formats: ["avif"],
  widths: [330, 640, 670, 1200],
  sizes:
    "(max-width: 360px) 330px, (max-width: 720px) 640px, (max-width: 1600px) 670px, 1200px",
  ...rest,
} as Parameters<typeof Picture>[0];
---

{title ? (
    <figure>
        <div class={divClass}>
            <AstroPicture {...pictureProps} />
        </div>
        <figcaption class="text-center text-xs text-muted-foreground mt-2 leading-6">{title}</figcaption>
    </figure>
    ) : (
    <div class={divClass}>
        <AstroPicture {...pictureProps} />
    </div>
)}

<style define:vars={{ 'bg-image': `url(${blurryImage.src})` }}>
    .blur-load {
        background-image: var(--bg-image);
        filter: blur(36px);
        transition: filter 300ms ease-in-out;
    }

    .blur-load.image-loaded {
        background-image: none;
        filter: blur(0);
    }

    .blur-load.image-loaded > img {
        opacity: 1;
    }

    .blur-load > img {
        opacity: 0;
        transition: all 300ms ease-in-out;
    }

    .ambient-mode {
        position: relative;
    }

    .ambient-mode::before {
        position: absolute;
        max-width: 100vw;
        overflow-x: hidden;
        width: 105%;
        height: 105%;

        background-image: var(--bg-image);
        background-size: cover;
        filter: blur(64px);
        opacity: 25%;
        z-index: -10;

        content: '';
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) translate3d(0, 0, 0);
    }
</style>

<script>
    document.addEventListener('astro:page-load', () => {
        const blurDivs = document.querySelectorAll('.blur-load');
        blurDivs.forEach((div) => {
            const image = div.querySelector('img');
            const handleLoadedImage = () => div.classList.add('image-loaded');

            if (image?.complete) {
                return handleLoadedImage();
            }

            image?.addEventListener('load', handleLoadedImage);
        });
    })
</script>
