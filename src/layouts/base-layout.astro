---
import "#/styles/global.css";
import { ClientRouter } from "astro:transitions";
import SEO from "#/components/seo.astro";
import { BottomNavigationBar } from "#/components/ui/bottom-navigation-bar";
import FooterMask from "#/components/ui/footer-mask.astro";
import Footer from "#/components/ui/footer.astro";
import { Toaster } from "#/components/ui/sonner";
import { cn } from "#/lib/ui";
import "sonner/dist/styles.css";

interface Props {
  pagefind?: boolean;
  class?: string;
}

const { pagefind, class: className } = Astro.props;
---

<html lang="ja" class="bg-background text-foreground palt antialiased" data-pagefind-body={pagefind ? "" : null}>
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>

    <link rel="manifest" href="/manifest.webmanifest">
    <link rel="icon" href="/favicon.ico" sizes="32x32">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">

    <meta name="generator" content={Astro.generator}/>
    <link rel='sitemap' href='/sitemap-index.xml' />

    <slot name='head' />
    <slot name='seo'>
        {/* @ts-expect-error: this is expected since it's inside BaseLayout */}
        <SEO />
    </slot>

    <ClientRouter fallback='swap' />
</head>
<body class="flex flex-col w-full max-w-6xl min-h-screen min-w-full mx-auto">
<main class='flex-1 w-full max-w-2xl mx-auto'>
    <div class={cn('container pt-20 pb-12', className)}>
        <slot/>
    </div>
</main>
<BottomNavigationBar client:load transition:persist="bottom-navigation-bar" />
<Footer />
<FooterMask />
<Toaster position="top-center" client:idle />
</body>
</html>

<script>
    const scrollOptions: ScrollIntoViewOptions = {
        behavior: 'smooth',
        block: 'start'
    }

    document.addEventListener('astro:page-load', () => {
        if (window.location.hash) {
            window.scrollTo({ top: 0, behavior: 'instant' })

            const targetId = window.location.hash.substring(1)
            const targetElement = document.getElementById(targetId)
            targetElement?.scrollIntoView(scrollOptions)
        }

        document.querySelectorAll('a[href^="#"]').forEach((link) => {
            link.addEventListener('click', (event) => {
                event.preventDefault()

                const currentTarget = event.currentTarget as HTMLAnchorElement
                const targetId = currentTarget.getAttribute('href')?.substring(1)

                if (!targetId) return

                const targetElement = document.getElementById(targetId)
                const block = currentTarget.dataset['block'] as ScrollLogicalPosition
                targetElement?.scrollIntoView({ ...scrollOptions, block })

                history.pushState(null, '', `#${targetId}`)
            })
        })

        window.addEventListener('hashchange', () => {
            const targetId = window.location.hash.substring(1)
            const targetElement = document.getElementById(targetId)

            targetElement?.scrollIntoView(scrollOptions)
        })
    })
</script>
