---
import type { InferEntrySchema } from "astro:content";
import type { MarkdownHeading } from "astro";
import SEO from "#/components/seo.astro";
import EmojiEyeCatch from "#/components/ui/emoji-eye-catch.astro";
import Skeleton from "#/components/ui/skeleton.astro";
import TableOfContent from "#/features/blog/components/ui/table-of-content.astro";
import ViewCounter from "#/features/blog/components/ui/view-counter.astro";
import BaseLayout from "#/layouts/base-layout.astro";
import { BASE_URL } from "#/lib/base-url";

interface Props extends InferEntrySchema<"blog"> {
  id: string;
  headings: MarkdownHeading[];
}

const {
  id,
  title,
  emoji,
  publishedAt,
  publishedAtString,
  description,
  status,
  headings,
} = Astro.props;
---

<BaseLayout pagefind>
    <SEO
            title={title}
            description={description}
            imageUrl={`${BASE_URL}/api/og/${id}.png`}
            type='article'
            slot='seo'
    />
    <slot name='head' slot='head'/>
    <section>
        <div class:list={[status === 'draft' && 'flex justify-between items-center']}>
            <EmojiEyeCatch emoji={emoji} />
            {status === "draft" && (
                    <span class="text-xs text-red-400">Draft</span>
            )}
        </div>
        <h1 class="mt-4 font-medium">{title}</h1>
        <div class="mt-2 flex items-center justify-between">
            <time datetime={publishedAt.toISOString()} class="text-sm text-muted-foreground">
                {publishedAtString}
            </time>
            <ViewCounter slug={id} server:defer>
                <Skeleton slot="fallback" class="h-4 w-14"/>
            </ViewCounter>
        </div>
    </section>
    <section>
        {headings.length > 1 && (
                <TableOfContent headings={headings} />
        )}
        <article class="prose">
            <slot />
        </article>
    </section>
</BaseLayout>

<script>
    const handleHeadingIntersection = () => {
        const observerOptions: IntersectionObserverInit = {
            root: null,
            rootMargin: '0px 0px -85% 0px',
            threshold: 0
        };

        const activeClass = 'active';

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (!entry.isIntersecting) return;

                const id = entry.target.getAttribute('id');

                document.querySelectorAll(`.${activeClass}`)
                    .forEach((item) => item.classList.remove(activeClass));

                const link = document.querySelector(`li > a[href="#${id}"]`);
                const toc = document.querySelector(`div[data-toc="${id}"]`);

                link?.classList.add(activeClass);
                toc?.classList.add(activeClass);
            })
        }, observerOptions);

        const headings = document.querySelectorAll('h2[id], h3[id]');
        headings.forEach((heading) => observer.observe(heading));

        if (headings.length > 1) {
            const firstHeadingId = headings[0]?.getAttribute('id');
            if (firstHeadingId) {
                const firstLink = document.querySelector(`li > a[href="#${firstHeadingId}"]`);
                const firstToc = document.querySelector(`div[data-toc="${firstHeadingId}"]`);

                firstLink?.classList.add(activeClass);
                firstToc?.classList.add(activeClass);
            }
        }

    }

    document.addEventListener('astro:page-load', handleHeadingIntersection)
</script>
