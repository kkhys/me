---
import { getCollection } from "astro:content";
import type { PaginateFunction } from "astro";
import SEO from "#/components/seo.astro";
import { countPerPage } from "#/config/constant";
import BaseLayout from "#/layouts/base-layout.astro";
import EntryList from "#/pages/blog/_components/entry-list.astro";
import Pagination from "#/pages/blog/_components/pagination.astro";
import { getTagBySlug } from "#/pages/blog/_config/tag";

export const getStaticPaths = async ({
  paginate,
}: {
  paginate: PaginateFunction;
}) => {
  const blogEntries = await getCollection("blog");
  const tags = [
    ...new Set(blogEntries.flatMap((entry) => entry.data.tags ?? [])),
  ];
  return tags.flatMap((tag) => {
    const filteredEntries = blogEntries
      .filter((post) => post.data.tags?.includes(tag))
      .sort(
        (a, b) => a.data.publishedAt.getTime() - b.data.publishedAt.getTime(),
      )
      .reverse();
    return paginate(filteredEntries, {
      pageSize: countPerPage,
      params: { tag: tag.toLowerCase() },
    });
  });
};

const { page } = Astro.props;
const { tag: tagSlug } = Astro.params;

const tag = getTagBySlug(tagSlug);

if (!tag) {
  throw new Error(`Tag "${tagSlug}" not found`);
}
---

<BaseLayout class="space-y-6">
    <SEO
            title={tag.label}
            description={`「${tag.label}」のタグがついた記事一覧`}
            slot='seo'
    />
    <section>
        <h1 class="font-medium">{tag.label}</h1>
    </section>
    <section>
        <EntryList blogEntries={page.data} showDate />
    </section>
    <Pagination page={page} baseUrl={`/blog/tags/${tag}`} />
</BaseLayout>
