---
import LinkIcon from "@lucide/astro/icons/link";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"h3"> {
  id: string;
}

const { id, ...rest } = Astro.props;
---

<h3 id={id} class="relative scroll-mt-12 budoux" {...rest}>
  <a href={`#${id}`} class="custom-link group no-underline">
    <div class="absolute w-8 mt-[4px] -ml-8 hidden opacity-0 transition group-hover:opacity-100 group-focus:opacity-100 md:block">
      <div class="group/anchor grid place-content-center size-5 rounded-md bg-zinc-50 ring-1 ring-zinc-300 transition ring-inset hover:ring-zinc-500 dark:bg-zinc-800 dark:ring-zinc-700 dark:hover:bg-zinc-700 dark:hover:ring-zinc-600">
        <LinkIcon class="size-3 stroke-zinc-500 transition dark:stroke-zinc-400 dark:group-hover/anchor:stroke-white" />
      </div>
    </div>
    <slot />
  </a>
</h3>

<script>
  import { navigate } from 'astro:transitions/client'

  const generateCustomEvent = (path: string) => {
    return new CustomEvent('local-navigation', {
      bubbles: true,
      detail: { path }
    })
  }

  const eventHandler = (event: Event) => {
    if (!event.currentTarget) return

    const href = (event.currentTarget as HTMLAnchorElement).href

    if (!href.startsWith(location.origin)) return

    const customEvent = generateCustomEvent(href.replace(location.origin, ''))

    event.currentTarget.dispatchEvent(customEvent)
  }

  let { pathname: previousPath } = window.location
  let isNavigating = false

  document.addEventListener('astro:page-load', () => {
    const links = document.querySelectorAll('a.custom-link')
    links.forEach((link) => {
      link.addEventListener('click', eventHandler)
    })

    previousPath = window.location.pathname
    isNavigating = false
  })

  window.addEventListener('popstate', async () => {
    if (window.location.origin !== location.origin) return

    const currentPath = window.location.pathname
    const currentHash = window.location.hash

    if (!isNavigating && currentPath !== previousPath && currentHash) {
      isNavigating = true
      await navigate(currentPath + currentHash, { history: 'replace' })
    }

    const customEvent = generateCustomEvent(window.location.pathname)

    document.dispatchEvent(customEvent)
  })
</script>
