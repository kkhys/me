---
import { getImage, Image } from "astro:assets";
import type { HTMLAttributes } from "astro/types";
import type { EnrichedTweet } from "react-tweet";
import Budoux from "#/components/budoux.astro";
import { getTweetData } from "#/lib/api/tweet";

interface Props extends HTMLAttributes<"div"> {
  /**
   * Tweet ID (e.g., "1234567890123456789")
   */
  id: string;
}

const { id, class: className, ...props } = Astro.props;

const tweet: EnrichedTweet = await getTweetData(id);

if (!tweet) {
  return null;
}

const truncate = (str: string, length: number) => {
  if (str.length <= length) return str;
  return `${str.slice(0, length - 3)}...`;
};

const cleanText = (text: string) => {
  // Remove trailing t.co links (images/videos)
  return text.replace(/\s*https:\/\/t\.co\/\w+\s*$/g, "").trim();
};

const firstPhoto = tweet.photos?.[0];

// Generate blurry images for lazy loading
const blurryPhotos = tweet.photos
  ? await Promise.all(
      tweet.photos.map((photo) =>
        getImage({
          src: photo.url,
          width: 20,
          height: Math.round((20 * photo.height) / photo.width),
          format: "webp",
        }),
      ),
    )
  : [];
---

<div class="grid place-items-center">
  <div
    class:list={[
      "relative flex h-fit w-full max-w-lg flex-col gap-2 overflow-hidden rounded-lg border p-4 backdrop-blur-md",
      className,
    ]}
    {...props}
  >
    <!-- Header -->
    <div class="flex flex-row justify-between tracking-tight">
      <div class="flex items-center space-x-2">
        <a href={tweet.url} target="_blank" rel="noreferrer">
          <Image
            src={tweet.user.profile_image_url_https}
            alt={tweet.user.screen_name}
            title={`Profile picture of ${tweet.user.name}`}
            width={48}
            height={48}
            format="webp"
            class="size-12 overflow-hidden rounded-full border border-transparent"
          />
        </a>
        <div>
          <a
            href={tweet.url}
            target="_blank"
            rel="noreferrer"
            class="flex items-center whitespace-nowrap font-semibold"
          >
            {truncate(tweet.user.name, 20)}
            {
              tweet.user.verified && (
                <svg
                  aria-label="Verified Account"
                  viewBox="0 0 24 24"
                  class="ml-1 inline size-4 text-blue-500"
                >
                  <g fill="currentColor">
                    <path d="M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-.115-.094-2.415-2.415c-.293-.293-.293-.768 0-1.06s.768-.294 1.06 0l1.77 1.767 3.825-5.74c.23-.345.696-.436 1.04-.207.346.23.44.696.21 1.04z" />
                  </g>
                </svg>
              )
            }
          </a>
          <div class="flex items-center space-x-1">
            <a
              href={tweet.url}
              target="_blank"
              rel="noreferrer"
              class="text-sm text-muted-foreground transition-all duration-75"
            >
              @{truncate(tweet.user.screen_name, 16)}
            </a>
          </div>
        </div>
      </div>
      <a href={tweet.url} target="_blank" rel="noreferrer">
        <span class="sr-only">Link to tweet</span>
        <svg
          viewBox="0 0 24 24"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          class="size-4 items-start transition-all ease-in-out hover:scale-105"
        >
          <path
            fill="currentColor"
            d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
          ></path>
        </svg>
      </a>
    </div>

    <!-- Tweet Body -->
    <div class="break-words leading-normal tracking-tighter">
      <span class="text-sm font-normal">
        <Budoux>{cleanText(tweet.text)}</Budoux>
      </span>
    </div>

    <!-- Media -->
    {
      tweet.video && (
        <div class="flex flex-1 items-center justify-center">
          <tweet-video poster={tweet.video.poster}>
            {tweet.video.variants.map((variant) => (
              <source src={variant.src} type={variant.type} />
            ))}
          </tweet-video>
        </div>
      )
    }
    {
      firstPhoto && tweet.photos?.length === 1 && (
        <div class="flex flex-1 items-center justify-center">
          <div class="tweet-photo-blur">
            <Image
              src={firstPhoto.url}
              alt={tweet.text}
              title={`Photo by ${tweet.user.name}`}
              width={firstPhoto.width}
              height={firstPhoto.height}
              format="webp"
              class="rounded-xl border object-cover shadow-sm"
            />
          </div>
        </div>
      )
    }
    {
      tweet.photos && tweet.photos.length > 1 && (
        <div class="flex flex-1 items-center justify-center">
          <div class="relative flex transform-gpu snap-x snap-mandatory gap-4 overflow-x-auto">
            <div class="shrink-0 snap-center sm:w-2" />
            {tweet.photos.map((photo) => (
              <div class="tweet-photo-blur h-64 w-5/6 shrink-0 snap-center snap-always">
                <Image
                  src={photo.url}
                  title={`Photo by ${tweet.user.name}`}
                  alt={tweet.text}
                  width={photo.width}
                  height={photo.height}
                  format="webp"
                  class="h-full w-full rounded-xl border object-cover shadow-sm"
                />
              </div>
            ))}
            <div class="shrink-0 snap-center sm:w-2" />
          </div>
        </div>
      )
    }
  </div>
</div>

<style define:vars={{
  'photo-bg-0': blurryPhotos[0] ? `url(${blurryPhotos[0].src})` : 'none',
}}>
	tweet-video {
		display: block;
		position: relative;
	}

  .tweet-photo-blur {
    background-size: cover;
    filter: blur(16px);
    transition: filter 300ms ease-in-out;
    border-radius: 0.75rem;
    overflow: hidden;
  }

  .tweet-photo-blur:nth-of-type(1) {
    background-image: var(--photo-bg-0);
  }

  .tweet-photo-blur.image-loaded {
    background-image: none;
    filter: blur(0);
  }

  .tweet-photo-blur > img {
    opacity: 0;
    transition: opacity 300ms ease-in-out;
  }

  .tweet-photo-blur.image-loaded > img {
    opacity: 1;
  }
</style>

<script>
  // Handle blur image loading
  document.addEventListener('astro:page-load', () => {
    const blurDivs = document.querySelectorAll('.tweet-photo-blur');
    blurDivs.forEach((div) => {
      const image = div.querySelector('img');
      const handleLoadedImage = () => div.classList.add('image-loaded');

      if (image?.complete) {
        return handleLoadedImage();
      }

      image?.addEventListener('load', handleLoadedImage);
    });
  });

	class TweetVideo extends HTMLElement {
		private video: HTMLVideoElement | null = null;
		private playButton: HTMLButtonElement | null = null;

		connectedCallback() {
			this.render();
			this.setupEventListeners();
		}

		private render() {
			const poster = this.getAttribute("poster") || "";
			const sources = Array.from(this.querySelectorAll("source"))
				.map((source) => source.outerHTML)
				.join("");

			this.innerHTML = `
				<div class="relative select-none rounded-xl border overflow-hidden">
					<video playsinline muted loop preload="metadata" poster="${poster}" class="w-full">
						${sources}
						お使いのブラウザはビデオをサポートしていません。
					</video>
					<button
						type="button"
						class="play-button absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/40 cursor-pointer p-4 z-10 transition-all duration-300 active:scale-95 rounded-full border opacity-100"
						aria-label="ビデオを再生"
					>
						<svg class="size-8 fill-white" viewBox="0 0 24 24">
							<path d="M8 5v14l11-7z"/>
						</svg>
					</button>
				</div>
			`;
		}

		private setupEventListeners() {
			this.video = this.querySelector("video");
			this.playButton = this.querySelector(".play-button");

			if (this.playButton && this.video) {
				this.playButton.removeEventListener("click", this.handlePlayClick);
				this.playButton.addEventListener("click", this.handlePlayClick);
			}
		}

		private handlePlayClick = (e: Event) => {
			e.preventDefault();

			if (this.playButton && this.video) {
				this.playButton.style.opacity = "0";
				this.playButton.style.pointerEvents = "none";

				setTimeout(() => {
					if (this.playButton && this.video) {
						this.playButton.style.display = "none";
						this.video.controls = true;
						this.video.play();
						this.video.focus();
					}
				}, 300);
			}
		};
	}

	customElements.define("tweet-video", TweetVideo);
</script>
