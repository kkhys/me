---
import {
  BENTO_SIZES,
  type BentoSizeOrCustom,
} from "#/features/home/config/bento-sizes.ts";
import { getCustomTransition } from "#/lib/custom-transition";
import { cn } from "#/lib/ui";

/**
 * Base component for Bento grid items
 *
 * @description Provides common styles and layout shared by all bento items
 * @param size - Grid size ("1x1" | "1x2" | "2x1" | "2x2" | custom class string)
 * @param href - Link URL (renders as <a> if specified, <div> otherwise)
 * @param target - Link target attribute
 * @param rel - Link rel attribute
 * @param transition - Animation delay value passed to getCustomTransition
 * @param umamiEvent - Umami tracking event name
 * @param umamiEventLocation - Umami tracking location
 * @param className - Additional CSS classes
 * @param isClickable - Whether to apply scale effect on click (default: true)
 * @example
 * ```astro
 * <BentoItemBase
 *   size="1x1"
 *   href="/about"
 *   transition={0.3}
 * >
 *   <div>Content</div>
 * </BentoItemBase>
 * ```
 */

interface Props {
  size: BentoSizeOrCustom;
  href?: string;
  target?: string;
  rel?: string;
  transition?: number;
  umamiEvent?: string;
  umamiEventLocation?: string;
  className?: string;
  isClickable?: boolean;
}

const {
  size,
  href,
  target,
  rel,
  transition,
  umamiEvent,
  umamiEventLocation,
  className,
  isClickable = true,
} = Astro.props;

// Use constant for predefined size keys, or use custom class string as-is
const sizeClasses =
  size in BENTO_SIZES ? BENTO_SIZES[size as keyof typeof BENTO_SIZES] : size;

const baseClasses = cn(
  "size-full shadow-sm rounded-xl border bg-background transition duration-200 dark:shadow-none",
  sizeClasses,
  isClickable && "active:scale-95",
  className,
);
---

{href ? (
  transition !== undefined ? (
  <a
    href={href}
    target={target}
    rel={rel}
    class={baseClasses}
    transition:animate={getCustomTransition(transition)}
    data-umami-event={umamiEvent}
    data-umami-event-location={umamiEventLocation}
  >
    <slot />
  </a>
  ) : (
  <a
    href={href}
    target={target}
    rel={rel}
    class={baseClasses}
    data-umami-event={umamiEvent}
    data-umami-event-location={umamiEventLocation}
  >
    <slot />
  </a>
  )
) : (
  transition !== undefined ? (
  <div
    class={baseClasses}
    transition:animate={getCustomTransition(transition)}
    data-umami-event={umamiEvent}
    data-umami-event-location={umamiEventLocation}
  >
    <slot />
  </div>
  ) : (
  <div
    class={baseClasses}
    data-umami-event={umamiEvent}
    data-umami-event-location={umamiEventLocation}
  >
    <slot />
  </div>
  )
)}
